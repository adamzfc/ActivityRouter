package com.adamzfc.router.compiler;

import com.adamzfc.router.annotation.Extra;
import com.adamzfc.router.annotation.Router;
import com.adamzfc.router.annotation.SceneTransition;
import com.google.auto.service.AutoService;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.CodeBlock;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Set;

import javax.annotation.processing.AbstractProcessor;
import javax.annotation.processing.Filer;
import javax.annotation.processing.Messager;
import javax.annotation.processing.ProcessingEnvironment;
import javax.annotation.processing.Processor;
import javax.annotation.processing.RoundEnvironment;
import javax.lang.model.SourceVersion;
import javax.lang.model.element.Element;
import javax.lang.model.element.ElementKind;
import javax.lang.model.element.TypeElement;
import javax.lang.model.util.ElementFilter;
import javax.lang.model.util.Elements;
import javax.tools.Diagnostic;

import static com.squareup.javapoet.TypeSpec.classBuilder;
import static javax.lang.model.element.Modifier.FINAL;
import static javax.lang.model.element.Modifier.PUBLIC;
import static javax.lang.model.element.Modifier.STATIC;

@AutoService(Processor.class)
public final class RouterProcessor extends AbstractProcessor {

    private Messager messager;
    private Filer filer;
    private Elements elements;

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        messager = processingEnv.getMessager();
        filer = processingEnv.getFiler();
        elements = processingEnv.getElementUtils();
    }

    @Override
    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
        String CLASS_NAME = "ActivityRouter";
        TypeSpec.Builder tb = classBuilder(CLASS_NAME)
                .addModifiers(PUBLIC, FINAL)
                .addJavadoc("generated by apt");

        MethodSpec.Builder methodBuilderGo = MethodSpec.methodBuilder("go")
                .addJavadoc("generated by apt")
                .addModifiers(PUBLIC, STATIC)
                .addParameter(ClassName.get("android.app", "Activity"), "activity")
                .addParameter(String.class, "name")
                .addParameter(HashMap.class, "extra")
                .addParameter(ClassName.get("android.view", "View"), "view");

        MethodSpec.Builder methodBuilderBind = MethodSpec.methodBuilder("bind")
                .addJavadoc("generated by apt")
                .addModifiers(PUBLIC, STATIC)
                .addParameter(ClassName.get("android.app", "Activity"), "mContext");

        CodeBlock.Builder blockBuilderGo = CodeBlock.builder();
        CodeBlock.Builder blockBuilderBind = CodeBlock.builder();
        ClassName activityRouter = ClassName.get("com.adamzfc.router.api", "ActivityRouter");
        blockBuilderGo.addStatement("$T.setExtraData(extra)", activityRouter);
        blockBuilderGo.addStatement("Activity mContext=activity");
        blockBuilderGo.beginControlFlow(" switch (name)");
        blockBuilderBind.beginControlFlow(" switch (mContext.getClass().getSimpleName())");
        List<ClassName> resolvedList = new ArrayList<>();
        List<RouterActivityModel> mRouterActivityModels = new ArrayList<>();
        for (TypeElement element : ElementFilter.typesIn(roundEnv.getElementsAnnotatedWith(Router.class))) {
            if (element.getKind() != ElementKind.CLASS) {
                error(element, "Only classes can be annotated with @%s",
                        Router.class.getSimpleName()
                );
                return true;
            }
            ClassName currentType = ClassName.get(element);
            if (resolvedList.contains(currentType)) continue;
            resolvedList.add(currentType);
            RouterActivityModel mRouterActivityModel = new RouterActivityModel();
            mRouterActivityModel.setElement(element);
            mRouterActivityModel.setActionName(element.getAnnotation(Router.class).value());
            List<Element> mExtraElements = new ArrayList<>();
            List<String> mExtraElementKeys = new ArrayList<>();
            for (Element childElement : element.getEnclosedElements()) {
                SceneTransition mSceneTransitionAnnotation = childElement.getAnnotation(SceneTransition.class);
                if (mSceneTransitionAnnotation != null) {
                    mRouterActivityModel.setSceneTransitionElementName(mSceneTransitionAnnotation.value());
                    mRouterActivityModel.setSceneTransitionElement(childElement);
                }
                Extra mExtraAnnotation = childElement.getAnnotation(Extra.class);
                if (mExtraAnnotation != null) {
                    mExtraElementKeys.add(mExtraAnnotation.value());
                    mExtraElements.add(childElement);
                }
            }
            mRouterActivityModel.setExtraElementKeys(mExtraElementKeys);
            mRouterActivityModel.setExtraElements(mExtraElements);
            boolean isNeedBind = (mExtraElementKeys.size() > 0
                    || mRouterActivityModel.getSceneTransitionElement() != null);
            mRouterActivityModel.setNeedBind(isNeedBind);
            mRouterActivityModels.add(mRouterActivityModel);
        }
        ClassName mActivityCompatName = ClassName.get("android.support.v4.app", "ActivityCompat");
        ClassName mIntentClassName = ClassName.get("android.content", "Intent");
        ClassName mActivityOptionsCompatName = ClassName.get("android.support.v4.app", "ActivityOptionsCompat");
        for (RouterActivityModel item : mRouterActivityModels) {
            blockBuilderGo.add("case $S: \n", item.getActionName());//1
            if (item.isNeedBind())
                blockBuilderBind.add("case $S: \n", item.getElement().getSimpleName());//1
            if (item.getExtraElements() != null && item.getExtraElements().size() > 0) {
                for (int i = 0; i < item.getExtraElements().size(); i++) {
                    Element mFiled = item.getExtraElements().get(i);
                    blockBuilderBind.add("(($T)mContext)." +//1
                                    "$L" +//2
                                    "= ($T) " +//3
                                    "$T.getExtraData().get(" +//4
                                    "$S);\n",//5
                            item.getElement(),//1
                            mFiled,//2
                            mFiled,//3
                            activityRouter,//4
                            item.getExtraElementKeys().get(i)//5
                    );//5
                }
            }
            if (item.getSceneTransitionElement() != null) {
                blockBuilderGo.add("$L.startActivity(mContext," +//2
                                "\nnew $L(mContext," +//3
                                "\n$L.class)," +//4
                                "\n$T.makeSceneTransitionAnimation(" +//5
                                "\nmContext,view," +//6
                                "\n$S).toBundle());", //7
                        mActivityCompatName,//2
                        mIntentClassName,//3
                        item.getElement(),//4
                        mActivityOptionsCompatName,//5
                        item.getSceneTransitionElementName());//6

                blockBuilderBind.add(
                        "$T.setTransitionName(" +//2
                                "(($T)mContext)." +//3
                                "$L, " +//4
                                "$S);\n",//5
                        ClassName.get("android.support.v4.view", "ViewCompat"),//2
                        item.getElement(),//3
                        item.getSceneTransitionElement(),//4
                        item.getSceneTransitionElementName());//5
            } else {
                blockBuilderGo.add("mContext.startActivity(" +//2
                                "\nnew $L(mContext," +//3
                                "\n$L.class));", //7
                        mIntentClassName,//3
                        item.getElement()//4
                );
            }
            blockBuilderGo.addStatement("\nbreak");//1
            if (item.isNeedBind()) blockBuilderBind.addStatement("break");//1
        }
        blockBuilderGo.addStatement("default: break");
        blockBuilderGo.endControlFlow();
        methodBuilderGo.addCode(blockBuilderGo.build());
        blockBuilderBind.addStatement("default: break");
        blockBuilderBind.endControlFlow();
        methodBuilderBind.addCode(blockBuilderBind.build());

        tb.addMethod(methodBuilderGo.build());
        tb.addMethod(methodBuilderBind.build());

        tb.addMethod(MethodSpec.methodBuilder("go")
                .addJavadoc("generated by apt")
                .addModifiers(PUBLIC, STATIC)
                .addParameter(ClassName.get("android.app", "Activity"), "activity")
                .addParameter(String.class, "name")
                .addParameter(HashMap.class, "extra")
                .addCode("go(activity,name,extra,null);\n").build());

        tb.addMethod(MethodSpec.methodBuilder("go")
                .addJavadoc("generated by apt")
                .addModifiers(PUBLIC, STATIC)
                .addParameter(ClassName.get("android.app", "Activity"), "activity")
                .addParameter(String.class, "name")
                .addCode("go(activity, name,null,null);\n").build());

        try {
            JavaFile javaFile = JavaFile.builder("com.adamzfc.router", tb.build()).build();
            javaFile.writeTo(filer);
        } catch (IOException e) {
//                e.printStackTrace();
        }

        return false;
    }

    @Override
    public Set<String> getSupportedAnnotationTypes() {
        return Collections.singleton(Router.class.getCanonicalName());
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    private void error(Element element, String msg, Object... args) {
        messager.printMessage(
                Diagnostic.Kind.ERROR,
                String.format(msg, args),
                element
        );
    }
}
